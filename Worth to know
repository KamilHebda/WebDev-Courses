//Zmiana liter w stringu 2 metoda replace

// const txt = "Marcin lubi prążki"
// const repTxt = txt.replace("Marcin","Kuba");
// console.log(repTxt);

//Dodawanie elementu do tablicy metody push() i pop();

// const tab = [1, 2, 3]; 
// tab.push(4); 
// console.log(tab);
// console.log(Array.isArray(tab));
// tab.pop(); 
// console.log(tab);

// Dodawanie i usuwanie elementu na początku tablicy metody unshift() i shift();

// const tab = [1, 2, 3, 4];
// tab.unshift(0);
// console.log(tab);
// tab.shift();
// console.log(tab);

// Łączenie elementów tablicy separatorem metoda join(separator);
// const tab = [1, 2, 3, 4].join(" "); 
// console.log(tab);

//Zamiana stringa w tablicę 

// const str = "Kononowicz to ziomek";
// console.log([...str]);
// console.log(str.split(" "));

//Wyszukiwanie elementu tablicy

// const tab = [1, 2, 3, 4];
// // console.log(tab.indexOf(4));
// // console.log(tab.lastIndexOf(1));
// console.log(tab.includes(5));

//sortowanie liczb 

// const tab = [2, 3, 7, 8, 1, 5, 9, 2];
// function compareNr(a, b) {
//   return a - b;
// }

// console.log(tab.sort(compareNr));

//sortowanie stringów 

// const tab = ["Mariusz", "aga", "Lucek", "arek"]
// tab.sort(function (a,b) {
//   return a.localeCompare( b);
// });
//  console.log(tab);

//łączeie tablic 

// const anim1 = ["pies", "kot", "mysza"]; 
// const anim2 = ["koń", "kogut", "kawka"];

// // console.log(anim1.concat(anim2));
// console.log([...anim1, ...anim2]);

//metoda slice(start, stop)

// const tab =  ["pies", "kot", "mysza", "koń", "kogut", "kawka"]
// const newTab = tab.slice(3,4); 
// console.log(newTab);

//metoda splice(index, ile usunąć, nowy element)

// const tab =  ["pies", "kot", "mysza", "koń", "kogut", "kawka"];
// const newTab = tab.splice(3,3);
// console.log(tab);

//forEach vs map

// const numbers = [0, 1, 2, 3, 4];

// const newNumbers = numbers.forEach(number => {console.log(number * 3)})
// console.log(newNumbers); //undefinied - nic nie zwraca - do wykonywania kodu bez zwracania

// const mapNumbers = numbers.map(number => number * 3)
// console.log(mapNumbers); //dostajemy tablicę undefinied, bo chcemy zrobić w console.logu console.loga

//pętle for of

// const tab =  ["pies", "kot", "mysza", "koń", "kogut", "kawka"];
// for (const el of tab){
//   console.log(el.toUpperCase()); 
// }

//Callback funkcja w funkcji

// const names = ['Andrzej', 'Michał', 'Aga', 'Mirka'];

// const showBigNames = (name) => {
//   console.log(name.toUpperCase());
// }

// names.forEach(showBigNames);

// names.forEach(name => console.log(name.toUpperCase()));

//Funkcja do zmiany nazwy

// const fixName = name => {
//   return name.charAt(0).toUpperCase() + name.slice(1);
// }

// const result = `${fixName('andrzej')} ${fixName('kowalski')}`;
// console.log(result);

//Pobieranie DOM

// //getelementById
// const test = document.getElementById('item');

// //getElementsByTagName

// const test2 = document.getElementsByTagName('ul');

// //getElementByClassName

// const test3 = document.getElementByClassName('test');

// //querySelector

// const test = document.querySelector('li');
// const liItem = ulList.querySelector('li');

// //querySelectorAll

// const test = document.querySelectorAll('li');

// query selektory nie wspomagają żywych kolekcji - elementów dodawanych do DOM z poziomu JSa

//tworzenie elementu

// const ulList = document.createElement('ul');
// const liItem = document.createElement('li');
// liItem.textContent = 'cześć';
// document.body.appendChild(ulList);
// ulList.appendChild(liItem);

// tworzenie elementu ćwiczenie

// const div = document.querySelector('div');
// const pItem = document.createElement('p');

// div.appendChild(pItem);
// console.log(pItem);

//Append - można dodawać wiele elementów po przecinku

// const div = document.querySelector('div');
// const pItem = document.createElement('p');
// const headingTwo = document.createElement('h2');

// div.append(pItem, headingTwo)

//outerHTML, innerHTML, innerText, textContent

// const btn = document.querySelector('button');

// console.log(btn.outerHTML);
// btn.outerHTML = '123' //usuwa przycisk i wstawia tekst

// btn.innerHTML = ''; //pracujemy tylko z tekstem
// btn.innerHTML = '<li>123</li>'; //możemy nawet dodać tagi html, nie powinniśmy stosować gdy użytkownik może modyfikować tekst na stronie, ponieważ innetHTML zaczytuje również style

// console.log(btn.innerText); //działają tak samo - dodają tekst na stronę 
// console.log(btn.textContent); //textContent ignoruje style dodane w html

//usuwanie elementów ze strony

// const div = document.querySelector('div');
// const p = document.querySelector('p');

//removeChild

// div.removeChild(p);
// document.body.removeChild(div);

//remove

// p.remove();
// div.remove();

// target.addEventListener(type, listener) - ogólny wzór

// const btn1 = document.querySelector('.btn1')

// btn1.addEventListener('click', () => 
//   console.log('klik');
// );

// btn1.addEventListener('mouseover', () => 
//   console.log('najechano na mnie');
// );

// const test = () => console.log('double click');

// btn1.addEventListener('dblclick', test);

// const btns = document.querySelectorAll('btn')
// btns.forEach(btn => btn.addEventListener('click', test));

//event

// const btn = document.querySelector('button');

// const test = (e) => console.log(e); //pokazuje eventy, gdzie klikneliśmy np.
// const test = (e) => console.log(e.target); //możemy odnosić się do elementu, który klikamy
// const test = (e) => console.log(e.target.classList); //wypisuje wszystkie klasy jakie mamy na przycisku
// const test = (e) => console.log(e.target.offsetTop); //pokazuje odległość od góry strony

// btn.addEventListener('click', test);

// bubbling i capturing 

// gold.addEventListener('click', infogold, {capture: true}); //zmiana fazy bubbling na capturing

//stop propagation - wkonuje się tylko ta funkcja, którą klikneliśmy bez fazy bubbling wyżej

// const infoGold = (e) => {
//   e.stopPropagation()
//   console.log("Wykonuje jakiś kod") /
// } 

// delegacja zdarzeń

// lime.addEventListener('click', e => {
//   if(e.target.matches('.circle2')){ //jak matchuje daną klase to dopiero się wyświetli console.log
//     console.log(test);
//   }
// })

// lime.addEventListener('click', e => { //pobieramy rodzica i nadajemy listenera
//   if(e.target.classList.contains('.circle2')){ //jak matchuje daną klase to dopiero się wyświetli console.log
//     console.log(test);
//   }
// })

// zmiana styli css DOM - nie powinniśmy korzystać na stronie

// document.body.style.backgroundColor = "green";

// const div = document.querySelector('div');

// div.style.fontSize = "20px";
// div.style.padding = " 20px 40px";
// div.style.borderRadius = '8px';

// dodawanie, usuwanie, toggle klas

// const addBtn = document.querySelector('button');
// const txt = document.querySelector('p');

// const addClass = () => {
//   txt.classList.add('test')
// }

// addBtn.addEventListener('click', addClass);

// const removeClass = () => {
//   text.classList.remove('test')
// }

// addBtn.addEventListener('click', removeClass);

// const toggleClass = () => {
//   text.classList.toggle('test')
// }

// addBtn.addEventListener('click', toggleClass);

// zmiana koloru tła

// const switcher = document.querySelector('.switch').addEventListener('click', () => {
//   document.body.classList.toggle('color');
// });

//setTimeout i setInterval

// const test = () => {
//   console.log("hi");
// }

// setInterval(test, 4000); // opóźnienie wykonania jakiejś funkcji
// setInterval(test, 2000); //zapętlone wykonywanie funkcji po czasie

//strict mode - zabezpieczenie w JS 
// 'use strict'

// const colors = ['red', 'green', 'blue'];

// for (let color of colors){ //musimy dodać let na początku
//   console.log(color);
// }

//alert, confirm & prompt

// alert('cześć');

// if(confirm('chcesz pizze?')){
//   console.log('ok');
// }else{
//   console.log('nie to nie');
// }; 

// const name = prompt('Cześć, jak masz na imię?', "Ania");
// console.log(`Cześć ${name}`); //rzadko się używa

//obiekt Math

// console.log(Math.PI);

// console.log(Math.max(5,10))
// console.log(Math.min(5,10))

//console.log(Math.random()) //generuje liczby od 0 do 1
//Math.floor() //sprowadza liczbę do liczby całkowitej bez wartości po przecinku (ucina)

//Losowa liczba z przedziału

// const min = 1;
// const max = 99;

// const result = Math.floor(Math.random() * (max-min+1) + min);
// console.log(result);

//Atrybuty w JS

// const link = document.querySelector('a');
// const img = document.querySelector('img');
// const p = document.queryselector('p');

// link.setAttribute('href', '#'); //dodaje i ustawia nowy atrybut i przypisuje do niego wartość w DOMie
// console.log(img.getAttribute('src')); //pobiera wartość, która jest przypisana do danego atrybutu
// console.log(p.hasAttribute('style')); //sprawdza, czy tag ma jakiś atrybut 
// p.removeAtribute('style'); // usuwa atrybut w DOMie

//data atrybuty - dodajemy własne data atrybuty w html np. div data-number = '123' data-more-info='to jest tekst'></div>

// div.dataset.id // przykład

// const div.document.querySelector('[data-number='23']'); //pobieranie customowych atrybutów w []
// console.log(divTag.dataset.number); //zwraca obiekt
// console.log(divTag.dataset.moreInfo);

//relacje rodzinne

// const grandpa = document.querySelector('.grandparent');
// const parent = grandpa.querySelector('.parent');
// const child = parent.querySelectorAll('.child');

//const middleChild = document.querySelector('.middle-child') //ma 2 braci 1 wcześniej 1 później
// const prevSibling = middleChild.previousElementSibling;
// const nextSibling = middleChild.nextElementSibling;

// const parentEl = middleChild.parentElement;
// const grandpaEl = middleChild.closest('.grandparent');

//Konsola

// console.log(window.console)
// console.warn('warning');
// console.error('error');
// console.table(['123', 123]);

//funkcja sprawdzająca zawartość tablicy w tablicy
// const arr = [[1], [2], [3], [4]];

// const isNumberInArrayOfArrays = (number, array) => {
//   array.forEach(innerArray => {
//     innerArray.includes(number)? console.log(true) : console.log(false);
//     // innerArray.indexOf(number) !== -1 ? console.log(true) : console.log(false); 
//   })
// };

// isNumberInArrayOfArrays(3, arr); 

// funkcja konwersji celciusów na farentheidy
// const farentheit = (celcius) => {
//   return celcius * 1.8 + 32;
// }

// console.log(farentheit(32));

//funkcja reverse string

// function reverseString(str) {
//   let reversedStr= '';
//   for (let i = str.length - 1; i >= 0; i--){
//     reversedStr += str[i];
//   }
//   return reversedStr;
// }

// console.log(reverseString("Dorotka"));

// easier way

// const txt = "Dorotka"
// console.log(txt.split("").reverse().join(""));

//silnia
// function factorialize(num) {
//   if (num === 0) {
//     return 1;
//   }
//   return num * factorialize(num - 1);
// }
// console.log(factorialize(6));

// zadanie z tablicami od MMC tablice

// const numbers = [1, 5, 13, 26, 48]

// const newArr = numbers.map(number => number * 5);
// console.log(newArr);

// for(const num of newArr){
//   (num % 2 === 0)? console.log(`liczba przysta ${num}`) : console.log(`liczba nieparzysta ${num}`);
// };

//zadanie z kolorami MMC tablice
// const color = ["czarny"];

// color.push('zielony');
// color.unshift('niebieski');

// for(const col of color){
//   console.log(`Mój ulubiony kolor to: ${col.charAt(0).toUpperCase() + col.slice(1)}`);
// }

// zadanie MMC tablice

// const str = "Audi, Mercedes, BMW, Nissan, Dodge";
// const newStr = str.split(",");
// console.log(newStr);

// (newStr.length > 3)? console.log("Jest Ok") : console.log("Nie jest Ok");

// (newStr.includes("Audi"))? newStr.push("Audi") : newStr.pop("Audi");
 
//  console.log(newStr);

// Zadanie MMC z funkcjami

// let score

// const add = (num1, num2) => {
//   const score = num1 + num2;
  
//   score % 2 === 0  ? even(score) : odd(score);
// }

// const even = (num) => {
//   console.log(`liczba ${num} jest parzysta`);
// }

// const odd = (num) => {
//   console.log(`liczba ${num} jest nieparzysta`);
// }

// add(2,3);

//zadanie MMC konwenter temperatury 

// let celsius
// let temp

// const fahrentheit = (c) => {
//   celsius = c;
//   temp = celsius * 1.8 + 32;
  
//   console.log(`${c}oC = ${temp}oF`);
// };

// fahrentheit(32);

//zadanie MMC pętla z forEach

// const num = 10;
// const numbers = [];

// for (let i = 0; i < num; i++) {
//   numbers.push(i);
// }

// const checkNumber = numbers.forEach(el => {
//   el % 3 === 0 && el != 0 ? console.log(`${el} jest podzielne przez 3`) : console.log(`${el} nie jest podzielne przez 3 lub x = 0`);
// });

//Zadanie MMC manipulacja DOM

// const ulList = document.createElement('ul');
// document.body.append(ulList);
// const number = 10;

// for (let i = 1; i <= number; i++) {
//   const liItem = document.createElement('li');
//   liItem.textContent = i;
//   ulList.append(liItem);
// }

// const lastLi = ulList.querySelector('li:last-child');
// lastLi.style.backgroundColor = 'blue';
// lastLi.style.padding = '20px 40px';
// lastLi.style.fontSize = '48px';

//zadania MMC manipulacja DOM 2

// const btn1 = document.querySelector('.btn1');
// const btn2 = document.querySelector('.btn2');
// const p1 = document.querySelector('.p1');
// const p2 = document.querySelector('.p2');
// const divSq = document.querySelector('.square');

// const hi = () => {
//   console.log('hi');
// }

// const red = () => {
//   divSq.style.backgroundColor = "red";
// }

// const blue = () => {
//   divSq.style.backgroundColor = "blue";
// }

// const toggle = () => {
//   p1.classList.toggle('show');
//   p2.classList.toggle('show');
// }

// btn1.addEventListener('dblclick', hi);
// divSq.addEventListener('mouseover', red);
// divSq.addEventListener('mouseleave', blue);
// btn2.addEventListener('click', toggle);

//zadanie MMC manipulacja DOM

// const imgElement = document.createElement('img');
// document.body.append(imgElement);
// imgElement.setAttribute('src', 'https://cdn.pixabay.com/photo/2022/03/08/07/08/water-7055153_960_720.jpg');
// img.Element.setAttribute('alt','obrazek');

// const myFunc = () => {
//   console.log('cokolwiek');
// }

// setTimeout(myFunc, 2000);

// zadanie MMC manipulacja DOM
// const liItems = document.querySelectorAll('li');
// let number = 1;

// for(liItem of liItems){
//   liItem.textContent = number;
//   liItem.dataset.id = number;
//   number++
// }

// const thirdLi = document.querySelector([data-id="3"])
// console.log(thirdLi.closest('.wrapper'));

// Obiekty - w JS pierwotnie nie było OOP

// const myObiect = {
//   key: value,
//   key: value,
//   key: value
// }

// Dodawanie nowych rzeczy do obektu

// const user = {
//   name: "Dorota",
//   age: 31,
//   // 'fav-color': 'czerwony' - warto zapamiętać
// }

// user.country = 'Polska'
// // user.fav-color //taki zapis jest niepoprawny
// user['fav-color'] = 'niebieski'

// console.log(user)

// const dogName = 'Drops'
// const dogAge = 5

// const dog = {
//   // name: dogName,
//   // age: dogAge
  
//   dogName,
//   dogAge
// }

// console.log(dog);

// Pętla for in

// const user = {
//   name: 'Andrzej',
//   age: 23,
//   sex: 'male',
//   'hair-color': 'black'
// }
// for(const data in user){
//   console.log(data + ":" + user[data]); //dostajemy sie do wartości przypisanych w kluczach
// }

// THIS

// const user = {
//   name: 'Kamil',
//   display(){
//     console.log(this.name); //this targetuje nasz obiekt, zwraca obiekt, w którym się znajdujemy
//   }
// }

// user.display();

// Konstruktor - funkcja do tworzenia obiektów, zapisujemy z dużej litery

// function User(name, age){
//   this.name = name
//   this.age = age
  
//   this.hello = function(){
//     console.log(`Cześć ${this.name}`)
//   }
// }

// const newUser = new User('Andrzej', 34)
// const newUser2 = new User('Maria', 33)
// console.log(newUser);
// console.log(newUser2);

// newUser2.hello();
 
//Prototyp 

//  function User(name, age){
//   this.name = name
//   this.age = age
  
// }

// const newUser = new User('Andrzej', 34)
// const newUser2 = new User('Maria', 33)
// const newUser3 = new User('Kiram', 23);

// console.log(newUser, newUser2, newUser3);

// User.prototype.hello = function(){
//     console.log(`Cześć ${this.name}`)
//   }
// User.prototype.country = 'Polska'

// //przenosimy metodę hello z obiektu i dodajemy do prorotypu, aby nie była wywoływana przy każdym obiekcie

// newUser.hello()

Zadanie MMC

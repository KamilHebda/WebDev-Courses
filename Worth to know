//Zmiana liter w stringu 2 metoda replace

// const txt = "Marcin lubi prążki"
// const repTxt = txt.replace("Marcin","Kuba");
// console.log(repTxt);

//Dodawanie elementu do tablicy metody push() i pop();

// const tab = [1, 2, 3]; 
// tab.push(4); 
// console.log(tab);
// console.log(Array.isArray(tab));
// tab.pop(); 
// console.log(tab);

// Dodawanie i usuwanie elementu na początku tablicy metody unshift() i shift();

// const tab = [1, 2, 3, 4];
// tab.unshift(0);
// console.log(tab);
// tab.shift();
// console.log(tab);

// Łączenie elementów tablicy separatorem metoda join(separator);
// const tab = [1, 2, 3, 4].join(" "); 
// console.log(tab);

//Zamiana stringa w tablicę 

// const str = "Kononowicz to ziomek";
// console.log([...str]);
// console.log(str.split(" "));

//Wyszukiwanie elementu tablicy

// const tab = [1, 2, 3, 4];
// // console.log(tab.indexOf(4));
// // console.log(tab.lastIndexOf(1));
// console.log(tab.includes(5));

//sortowanie liczb 

// const tab = [2, 3, 7, 8, 1, 5, 9, 2];
// function compareNr(a, b) {
//   return a - b;
// }

// console.log(tab.sort(compareNr));

//sortowanie stringów 

// const tab = ["Mariusz", "aga", "Lucek", "arek"]
// tab.sort(function (a,b) {
//   return a.localeCompare( b);
// });
//  console.log(tab);

//łączeie tablic 

// const anim1 = ["pies", "kot", "mysza"]; 
// const anim2 = ["koń", "kogut", "kawka"];

// // console.log(anim1.concat(anim2));
// console.log([...anim1, ...anim2]);

//metoda slice(start, stop)

// const tab =  ["pies", "kot", "mysza", "koń", "kogut", "kawka"]
// const newTab = tab.slice(3,4); 
// console.log(newTab);

//metoda splice(index, ile usunąć, nowy element)

// const tab =  ["pies", "kot", "mysza", "koń", "kogut", "kawka"];
// const newTab = tab.splice(3,3);
// console.log(tab);

//forEach vs map

// const numbers = [0, 1, 2, 3, 4];

// const newNumbers = numbers.forEach(number => {console.log(number * 3)})
// console.log(newNumbers); //undefinied - nic nie zwraca - do wykonywania kodu bez zwracania

// const mapNumbers = numbers.map(number => number * 3)
// console.log(mapNumbers); //dostajemy tablicę undefinied, bo chcemy zrobić w console.logu console.loga

//pętle for of

// const tab =  ["pies", "kot", "mysza", "koń", "kogut", "kawka"];
// for (const el of tab){
//   console.log(el.toUpperCase()); 
// }

//Callback funkcja w funkcji

// const names = ['Andrzej', 'Michał', 'Aga', 'Mirka'];

// const showBigNames = (name) => {
//   console.log(name.toUpperCase());
// }

// names.forEach(showBigNames);

// names.forEach(name => console.log(name.toUpperCase()));

//Funkcja do zmiany nazwy

// const fixName = name => {
//   return name.charAt(0).toUpperCase() + name.slice(1);
// }

// const result = `${fixName('andrzej')} ${fixName('kowalski')}`;
// console.log(result);

//Pobieranie DOM

// //getelementById
// const test = document.getElementById('item');

// //getElementsByTagName

// const test2 = document.getElementsByTagName('ul');

// //getElementByClassName

// const test3 = document.getElementByClassName('test');

// //querySelector

// const test = document.querySelector('li');
// const liItem = ulList.querySelector('li');

// //querySelectorAll

// const test = document.querySelectorAll('li');

// query selektory nie wspomagają żywych kolekcji - elementów dodawanych do DOM z poziomu JSa

//tworzenie elementu

// const ulList = document.createElement('ul');
// const liItem = document.createElement('li');
// liItem.textContent = 'cześć';
// document.body.appendChild(ulList);
// ulList.appendChild(liItem);

// tworzenie elementu ćwiczenie

// const div = document.querySelector('div');
// const pItem = document.createElement('p');

// div.appendChild(pItem);
// console.log(pItem);

//Append - można dodawać wiele elementów po przecinku

// const div = document.querySelector('div');
// const pItem = document.createElement('p');
// const headingTwo = document.createElement('h2');

// div.append(pItem, headingTwo)

//outerHTML, innerHTML, innerText, textContent

// const btn = document.querySelector('button');

// console.log(btn.outerHTML);
// btn.outerHTML = '123' //usuwa przycisk i wstawia tekst

// btn.innerHTML = ''; //pracujemy tylko z tekstem
// btn.innerHTML = '<li>123</li>'; //możemy nawet dodać tagi html, nie powinniśmy stosować gdy użytkownik może modyfikować tekst na stronie, ponieważ innetHTML zaczytuje również style

// console.log(btn.innerText); //działają tak samo - dodają tekst na stronę 
// console.log(btn.textContent); //textContent ignoruje style dodane w html

//usuwanie elementów ze strony

// const div = document.querySelector('div');
// const p = document.querySelector('p');

//removeChild

// div.removeChild(p);
// document.body.removeChild(div);

//remove

// p.remove();
// div.remove();

// target.addEventListener(type, listener) - ogólny wzór

// const btn1 = document.querySelector('.btn1')

// btn1.addEventListener('click', () => 
//   console.log('klik');
// );

// btn1.addEventListener('mouseover', () => 
//   console.log('najechano na mnie');
// );

// const test = () => console.log('double click');

// btn1.addEventListener('dblclick', test);

// const btns = document.querySelectorAll('btn')
// btns.forEach(btn => btn.addEventListener('click', test));

//event

// const btn = document.querySelector('button');

// const test = (e) => console.log(e); //pokazuje eventy, gdzie klikneliśmy np.
// const test = (e) => console.log(e.target); //możemy odnosić się do elementu, który klikamy
// const test = (e) => console.log(e.target.classList); //wypisuje wszystkie klasy jakie mamy na przycisku
// const test = (e) => console.log(e.target.offsetTop); //pokazuje odległość od góry strony

// btn.addEventListener('click', test);

// bubbling i capturing 

// gold.addEventListener('click', infogold, {capture: true}); //zmiana fazy bubbling na capturing

//stop propagation - wkonuje się tylko ta funkcja, którą klikneliśmy bez fazy bubbling wyżej

// const infoGold = (e) => {
//   e.stopPropagation()
//   console.log("Wykonuje jakiś kod") /
// } 

// delegacja zdarzeń

// lime.addEventListener('click', e => {
//   if(e.target.matches('.circle2')){ //jak matchuje daną klase to dopiero się wyświetli console.log
//     console.log(test);
//   }
// })

// lime.addEventListener('click', e => { //pobieramy rodzica i nadajemy listenera
//   if(e.target.classList.contains('.circle2')){ //jak matchuje daną klase to dopiero się wyświetli console.log
//     console.log(test);
//   }
// })

// zmiana styli css DOM - nie powinniśmy korzystać na stronie

// document.body.style.backgroundColor = "green";

// const div = document.querySelector('div');

// div.style.fontSize = "20px";
// div.style.padding = " 20px 40px";
// div.style.borderRadius = '8px';

// dodawanie, usuwanie, toggle klas

// const addBtn = document.querySelector('button');
// const txt = document.querySelector('p');

// const addClass = () => {
//   txt.classList.add('test')
// }

// addBtn.addEventListener('click', addClass);

// const removeClass = () => {
//   text.classList.remove('test')
// }

// addBtn.addEventListener('click', removeClass);

// const toggleClass = () => {
//   text.classList.toggle('test')
// }

// addBtn.addEventListener('click', toggleClass);

// zmiana koloru tła

// const switcher = document.querySelector('.switch').addEventListener('click', () => {
//   document.body.classList.toggle('color');
// });

//setTimeout i setInterval

// const test = () => {
//   console.log("hi");
// }

// setInterval(test, 4000); // opóźnienie wykonania jakiejś funkcji
// setInterval(test, 2000); //zapętlone wykonywanie funkcji po czasie

//strict mode - zabezpieczenie w JS 
// 'use strict'

// const colors = ['red', 'green', 'blue'];

// for (let color of colors){ //musimy dodać let na początku
//   console.log(color);
// }

//alert, confirm & prompt

// alert('cześć');

// if(confirm('chcesz pizze?')){
//   console.log('ok');
// }else{
//   console.log('nie to nie');
// }; 

// const name = prompt('Cześć, jak masz na imię?', "Ania");
// console.log(`Cześć ${name}`); //rzadko się używa

//obiekt Math

// console.log(Math.PI);

// console.log(Math.max(5,10))
// console.log(Math.min(5,10))

//console.log(Math.random()) //generuje liczby od 0 do 1
//Math.floor() //sprowadza liczbę do liczby całkowitej bez wartości po przecinku (ucina)

//Losowa liczba z przedziału

// const min = 1;
// const max = 99;

// const result = Math.floor(Math.random() * (max-min+1) + min);
// console.log(result);

//Atrybuty w JS

// const link = document.querySelector('a');
// const img = document.querySelector('img');
// const p = document.queryselector('p');

// link.setAttribute('href', '#'); //dodaje i ustawia nowy atrybut i przypisuje do niego wartość w DOMie
// console.log(img.getAttribute('src')); //pobiera wartość, która jest przypisana do danego atrybutu
// console.log(p.hasAttribute('style')); //sprawdza, czy tag ma jakiś atrybut 
// p.removeAtribute('style'); // usuwa atrybut w DOMie

//data atrybuty - dodajemy własne data atrybuty w html np. div data-number = '123' data-more-info='to jest tekst'></div>

// div.dataset.id // przykład

// const div.document.querySelector('[data-number='23']'); //pobieranie customowych atrybutów w []
// console.log(divTag.dataset.number); //zwraca obiekt
// console.log(divTag.dataset.moreInfo);

//relacje rodzinne

// const grandpa = document.querySelector('.grandparent');
// const parent = grandpa.querySelector('.parent');
// const child = parent.querySelectorAll('.child');

//const middleChild = document.querySelector('.middle-child') //ma 2 braci 1 wcześniej 1 później
// const prevSibling = middleChild.previousElementSibling;
// const nextSibling = middleChild.nextElementSibling;

// const parentEl = middleChild.parentElement;
// const grandpaEl = middleChild.closest('.grandparent');

//Konsola

// console.log(window.console)
// console.warn('warning');
// console.error('error');
// console.table(['123', 123]);

//funkcja sprawdzająca zawartość tablicy w tablicy
// const arr = [[1], [2], [3], [4]];

// const isNumberInArrayOfArrays = (number, array) => {
//   array.forEach(innerArray => {
//     innerArray.includes(number)? console.log(true) : console.log(false);
//     // innerArray.indexOf(number) !== -1 ? console.log(true) : console.log(false); 
//   })
// };

// isNumberInArrayOfArrays(3, arr); 

// funkcja konwersji celciusów na farentheidy
// const farentheit = (celcius) => {
//   return celcius * 1.8 + 32;
// }

// console.log(farentheit(32));

//funkcja reverse string

// function reverseString(str) {
//   let reversedStr= '';
//   for (let i = str.length - 1; i >= 0; i--){
//     reversedStr += str[i];
//   }
//   return reversedStr;
// }

// console.log(reverseString("Dorotka"));

// easier way

// const txt = "Dorotka"
// console.log(txt.split("").reverse().join(""));

//silnia
// function factorialize(num) {
//   if (num === 0) {
//     return 1;
//   }
//   return num * factorialize(num - 1);
// }
// console.log(factorialize(6));

// zadanie z tablicami od MMC tablice

// const numbers = [1, 5, 13, 26, 48]

// const newArr = numbers.map(number => number * 5);
// console.log(newArr);

// for(const num of newArr){
//   (num % 2 === 0)? console.log(`liczba przysta ${num}`) : console.log(`liczba nieparzysta ${num}`);
// };

//zadanie z kolorami MMC tablice
// const color = ["czarny"];

// color.push('zielony');
// color.unshift('niebieski');

// for(const col of color){
//   console.log(`Mój ulubiony kolor to: ${col.charAt(0).toUpperCase() + col.slice(1)}`);
// }

// zadanie MMC tablice

// const str = "Audi, Mercedes, BMW, Nissan, Dodge";
// const newStr = str.split(",");
// console.log(newStr);

// (newStr.length > 3)? console.log("Jest Ok") : console.log("Nie jest Ok");

// (newStr.includes("Audi"))? newStr.push("Audi") : newStr.pop("Audi");
 
//  console.log(newStr);

// Zadanie MMC z funkcjami

// let score

// const add = (num1, num2) => {
//   const score = num1 + num2;
  
//   score % 2 === 0  ? even(score) : odd(score);
// }

// const even = (num) => {
//   console.log(`liczba ${num} jest parzysta`);
// }

// const odd = (num) => {
//   console.log(`liczba ${num} jest nieparzysta`);
// }

// add(2,3);

//zadanie MMC konwenter temperatury 

// let celsius
// let temp

// const fahrentheit = (c) => {
//   celsius = c;
//   temp = celsius * 1.8 + 32;
  
//   console.log(`${c}oC = ${temp}oF`);
// };

// fahrentheit(32);

//zadanie MMC pętla z forEach

// const num = 10;
// const numbers = [];

// for (let i = 0; i < num; i++) {
//   numbers.push(i);
// }

// const checkNumber = numbers.forEach(el => {
//   el % 3 === 0 && el != 0 ? console.log(`${el} jest podzielne przez 3`) : console.log(`${el} nie jest podzielne przez 3 lub x = 0`);
// });

//Zadanie MMC manipulacja DOM

// const ulList = document.createElement('ul');
// document.body.append(ulList);
// const number = 10;

// for (let i = 1; i <= number; i++) {
//   const liItem = document.createElement('li');
//   liItem.textContent = i;
//   ulList.append(liItem);
// }

// const lastLi = ulList.querySelector('li:last-child');
// lastLi.style.backgroundColor = 'blue';
// lastLi.style.padding = '20px 40px';
// lastLi.style.fontSize = '48px';

//zadania MMC manipulacja DOM 2

// const btn1 = document.querySelector('.btn1');
// const btn2 = document.querySelector('.btn2');
// const p1 = document.querySelector('.p1');
// const p2 = document.querySelector('.p2');
// const divSq = document.querySelector('.square');

// const hi = () => {
//   console.log('hi');
// }

// const red = () => {
//   divSq.style.backgroundColor = "red";
// }

// const blue = () => {
//   divSq.style.backgroundColor = "blue";
// }

// const toggle = () => {
//   p1.classList.toggle('show');
//   p2.classList.toggle('show');
// }

// btn1.addEventListener('dblclick', hi);
// divSq.addEventListener('mouseover', red);
// divSq.addEventListener('mouseleave', blue);
// btn2.addEventListener('click', toggle);

//zadanie MMC manipulacja DOM

// const imgElement = document.createElement('img');
// document.body.append(imgElement);
// imgElement.setAttribute('src', 'https://cdn.pixabay.com/photo/2022/03/08/07/08/water-7055153_960_720.jpg');
// img.Element.setAttribute('alt','obrazek');

// const myFunc = () => {
//   console.log('cokolwiek');
// }

// setTimeout(myFunc, 2000);

// zadanie MMC manipulacja DOM

// const liItems = document.querySelectorAll('li');
// let number = 1;

// for(liItem of liItems){
//   liItem.textContent = number;
//   liItem.dataset.id = number;
//   number++
// }

// const thirdLi = document.querySelector([data-id="3"])
// console.log(thirdLi.closest('.wrapper'));

// Obiekty - w JS pierwotnie nie było OOP

// const myObiect = {
//   key: value,
//   key: value,
//   key: value
// }

// Dodawanie nowych rzeczy do obektu

// const user = {
//   name: "Dorota",
//   age: 31,
//   // 'fav-color': 'czerwony' - warto zapamiętać
// }

// user.country = 'Polska'
// // user.fav-color //taki zapis jest niepoprawny
// user['fav-color'] = 'niebieski'

// console.log(user)

// const dogName = 'Drops'
// const dogAge = 5

// const dog = {
//   // name: dogName,
//   // age: dogAge
  
//   dogName,
//   dogAge
// }

// console.log(dog);

// Pętla for in

// const user = {
//   name: 'Andrzej',
//   age: 23,
//   sex: 'male',
//   'hair-color': 'black'
// }
// for(const data in user){
//   console.log(data + ":" + user[data]); //dostajemy sie do wartości przypisanych w kluczach
// }

// THIS

// const user = {
//   name: 'Kamil',
//   display(){
//     console.log(this.name); //this targetuje nasz obiekt, zwraca obiekt, w którym się znajdujemy
//   }
// }

// user.display();

// Konstruktor - funkcja do tworzenia obiektów, zapisujemy z dużej litery

// function User(name, age){
//   this.name = name
//   this.age = age
  
//   this.hello = function(){
//     console.log(`Cześć ${this.name}`)
//   }
// }

// const newUser = new User('Andrzej', 34)
// const newUser2 = new User('Maria', 33)
// console.log(newUser);
// console.log(newUser2);

// newUser2.hello();
 
//Prototyp 

//  function User(name, age){
//   this.name = name
//   this.age = age
  
// }

// const newUser = new User('Andrzej', 34)
// const newUser2 = new User('Maria', 33)
// const newUser3 = new User('Kiram', 23);

// console.log(newUser, newUser2, newUser3);

// User.prototype.hello = function(){
//     console.log(`Cześć ${this.name}`)
//   }
// User.prototype.country = 'Polska'

// //przenosimy metodę hello z obiektu i dodajemy do prototypu, aby nie była wywoływana przy każdym obiekcie

// newUser.hello()

// Zadanie MMC

// const btn1 = document.querySelector('.btn1');
// const btn2 = document.querySelector('.btn2');
// const btn3 = document.querySelector('.btn3');
// const p = document.querySelector('p');

// function Food(name, price) {
//   this.name = name
//   this.price = price
// }

// const schabowy = new Food ('Schabowy', 23)
// const carbonara = new Food ('Carbonara', 19)
// const żur = new Food ('Żurek', 15)

// Food.prototype.show = function() {
//   console.log(`${this.name} kosztuje ${this.price} zł.`);
// }

// btn1.addEventListener('click', () => console.log(this)); - this jest obiektem window
// btn1.addEventListener('click', function(){console.log(this)}); - this jest naszym buttonem

// btn1.addEventListener('click', () => schabowy.show()); - sposób na rozwiązanie problemu z thisem
// btn2.addEventListener('click', () => carbonara.show());
// btn3.addEventListener('click', () => żur.show());

// THIS 2

// console.log(this); - w zakresie globalnym obiektem window

// function test () {
//   console.log(this);
// }

// test() - obiekt window, z use strictem undefined

//this w zwykłej funkcji będzie wskazywał na obiekt, który jest na lewo od kropki
// const person = {
//   name: 'Kajek',
//   'fav-meal': 'sznycel',
//   address: {
//     city: 'Kraków',
//     'zip-code': '30-741',
//     showCity(){
//       console.log(this.city);
//     }
//   }
// }

// person.address.showCity();

// this w konstruktorze wskazuje na obiekt, stworzony na podstawie konstruktora

// function Food(name){
//   this.name = name
// }

// const meal = new Food('schabowy')
// const meal2 = new Food('pepsy')

// console.log(meal, meal2);

// THIS 3

// this w listenerach

// const btns = document.querySelectorAll('button');

// btns.forEach(btn => btn.addEventListener('click', function (){
//   console.log(this); //this wskazuje na element, który kliknelismy, jeśli damy this.textContent to this wskazuje na liczby w buttonie
// }))

// btns.forEach(btn => btn.addEventListener('click', function (e){
//   console.log(e.target); //this wskazuje na ten sam element co this z przykładu wyżej
// }))

// this w funkcji strzałkowej

// btns.forEach(btn => btn.addEventListener('click', () => {
//   console.log(this); //this jest undefined - ponieważ jest obiektem window
// }))

// btns.forEach(btn => btn.addEventListener('click', (e) => {
//   console.log(e.target); //this wskazuje na element, który klikneliśmy
// }))

// const ob = {
//   number: 123,
//   showNumber() {
//     console.log(this.number); //cl pokaże 123
//   },
//   // showNumber2:() => {
//   //   console.log(this); //wskazuje obiekt window
  
//   showNumber2() {
//     const test = () => {
//       console.log(this.number); //sposób na thisa w funkcji strzałkowej
//     }
//     test();
//   }
// }

// ob.showNumber();
// ob.showNumber2();

// Bind wiąże thisa z obiektami

// function test() {
//   console.log(this);
//   console.log(this.name);
// }

// const car1 = {
//   name: 'Audi',
// }

// const car2 = {
//   name: 'Dodge',
// }

// const car3 = {
//   name: 'Nissan',
// }

// test.bind(car1)();//do metody bind jako argument podajemy obiekt, który chcemy wywołać i wywiłujemy jeszcze raz całą funkcję
// test.bind(car2)();
// test.bind(car3)();

// Call i Apply - wiąże obiekt z funkcją

// const movie = {
//   title: 'Avengers',
// }

// function showMovie(price, cinema) {
//   console.log(`Film ${this.title}, cena: ${price}, kino: ${cinema}.`)//this wskazuje window
// }

// showMovie(23, Helios);

// showMovie.call(movie, 35, 'Kinokox');//podajemy nazwę obiektu, o który nam chodzi i argumenty
// showMovie.apply(movie, [35, 'Kinokox']); podajemy argumenty w tablicy

// Klasy

// Stary zapis

// function Person(name, age){  
//   this.name = name
//   this.age = age
// }

// Person.prototype.sayHi = function () {
//   console.log(`Cześć, jestem ${this.name}`)
// }

// Person.prototype.showAge = function () {
//   console.log(`Mam ${this.age} lat.`)
// }

// const person1 = new Person('Ela', 26);
// console.log(person1);
// person1.sayHi();
// person1.showAge();

// nowy zapis

// class Person2 {
//   constructor (name, age){  
//     this.name = name
//     this.age = age
//   }
  
//   sayHi(){
//     console.log(`Cześć, jestem ${this.name}`)
//   }
//   showAge(){
//     console.log(`Mam ${this.age} lat/a.`)
//   }
// }

// const person2 = new Person2 ('Kasia', 34);
// person2.sayHi();
// person2.showAge();

// Extends i Super

// class Animal {
//   constructor(name) {
//     this.name = name
//   }
  
//   sound() {
//     console.log(`Zwierzak robi 'hau hau'.`)
//   }
// }

// class Dog extends Animal {
//   constructor(name, age) {
//     super(name)//musimy odwołać się słowem super do argumentu w konstruktorze klasy z której dziedziczymy
//     this.age = age
//   }
// }

// class Cat extends Animal{
//   constructor(name){
//     super (name)
//   }
//   sound(){
//     console.log('miał')
//   }
// }

//   const dog = new Dog('Drops', 6)
//   const cat = new Cat('Andrzej')
//   console.log(cat);
//   cat.sound();

// Obiect.Assign - łączenie obiektów 

// const user = {
//   name: "Lily",
//   age: 23
// }

// const pet = {
//   name: "Figa",
//   type: 'dog'
// }


// const userInfo = Object.assign(user, pet);// Object.assign to co jest po prawej stronie przypisuje do lewej
// console.log(userInfo); //jeden kluczy name został nadpisany
// console.log(user); //został zniszczony

// const userInfo2 = Object.assign({}, user, pet); //wstawiamy {} przed naszymi obektami, zęby ich nie zniszczyć 

// const userCopy = Object.assign({}, user)
// userCopy.age =25;
// console.log(userCopy);

// Destrukturyzacja obiektów

// const person = {
//   name: 'Andrzej',
//   age: '43',
//   job: 'kelner',
//   car: {
//     brand: 'Dodge',
//     model: 'Viper'
//   }
// }

// const showInfo = () => {
  
//   const {name, age, job} = person
//   const {name:firstName, age, job} = person //podmieniamy argument
  
//   // const name = person.name
//   // const age = person.age
//   // const job = person.job
  
//   console.log(`${name} ma ${age} lat i jest ${job}em`)
  
//   // console.log(`${person.name} ma ${person.age} lat i jest ${person.job}em`)
// }

// showInfo()

// const showInfo = ({name, age, job}) => { //skrócony zapis tego co powyżej
  
//   console.log(`${name} ma ${age} lat i jest ${job}em`)
// }

// showInfo(person);

// const showInfo2 = ({car: {brand, model}}) => { //jak dostać się do obiektu w obiekcie
//   console.log(`Jej samochód to ${brand} ${model}`);
// }

// showInfo2(person);

// const showInfo3 = () => { //jak dostać się do obiektu w obiekcie
  
//   const {car: {brand, model}} = person
  
//   console.log(`Jej samochód to ${brand} ${model}`);
// }

// showInfo3();

// Destrukturyzacja tablic - bardziej jako ciekawostka

// const colors = ['czerwony', 'niebieski', 'zielony'];

// const firstColor = colors[0];
// const secondColor = colors[1];

// const [first, second] = colors

// console.log(firstColor, secondColor);
// console.log(first, second);

// const[,,abcd] = colors
// console.log(colors)

// JSON AJAX API

// https://github.com/public-apis/public-apis

// const btn = document.querySelector('button');
// const img = document.querySelector('img');

// const URL = 'https://dog.ceo/api/breeds/image/random' //pobieramy API ze strony z API (zapisujemy dużymi literami)
// const API_KEY = '123ksdako32432' //zapisujemy klucz do API

// fetch().then().catch() - standardowy zapis fetcha. fetch słuzy do poboru danych, then mówi co zrobimy sobie z tymi danymi, catch wyłapuje błędy 

// fetch(URL)
//   .then(res => console.log(res)) //response
//   .then(data => console.log(data.message)) //przechodzimy do data i dostajemy link do zdj
//   .catch(err => console.error(err)) //wyrzuca błąd

// btn.addEventListener('click', ()=> {
//   fetch(URL)
//   .then(res => res.json()) //response w jsonie
//   .then(data => img.setAttribute('src', data.message)) //ustawiamy atrybut do img
//   .catch(err => console.error(err)) //wyrzuca błąd
// } )

// Statusy

// http.cat - strona zawierająca kody błędów

// 400 - jakiś błąd np. 404 not found 403 Acces Denied

// AJAX - asynchroniczny JS i XML (przechowuje dane), możemy wysylać i odbierać dane bez konieczności przeładowania strony. 
// JSON - podobny do obiektu, reprezentuje dane i tylko dane, musi być w " " (pojedyńczy nie zadziała), ostatnia właściwość bez przecinka, rozszerzenie .json.

// const user = {
//   name: 'Angela', 
//   age: '23', 
//   car: 'Nissan',
// }


// {
//   "name": "Angela", //Format JSON
//   "age": 23,
//   "car": "Nissan"
// }

// Synchroniczność i asynchroniczność
// JS jest językiem synchronicznym, bo kod się wykonuje po kolei

// btn.addEventListener('click', () => {
//   console.log('wykonuje się pierwszy!')
//   const p = document.createElement('p')
//   alert('stworzyłem paragraf!') //alert blokuje wykonywanie reszty kodu
//   p.textContent = 'test'
//   document.body.append(p)
//   console.log('koniec')
// })

// Kod asynchroniczny nie blokuje wykonywania się innych funkcji

// console.log(1);
// setTimeout(() => {
//   console.log(2);
// }, 800);
// console.log(3);

// 1,3,2

// Promisy - obietnice, jeśli spełnimy obietnicę to coś się stanie a jak nie to też coś się stanie

// callback hell - np wielopoziomowe odwoływanie się w funkcji do innej funkcji - kod bardzo trudno się czyta np.

// setTimeout(() => {
//   console.log(1);
//     setTimeout(() => {
//       console.log(2);
//         setTimeout(() => {
//           console.log(3);
//             setTimeout(() => {
//               console.log(4);
//                 setTimeout(() => {
//                   console.log(5);
//                 },300)
//             },300)
//          },300)
//      },300)
// },300)

// z pomocą przychodza promisy, z pomocą których można uniknąć callbackhella lub nie jesteśmy pewnie wyniku funkcji

// const newPromise = () => {
//   return new Promise((resolve, reject) => {
//     setTimeout(() => {
//       resolve()
//     }, 300)
//   })
// }

// newPromise()
//       .then(() => {
//         console.log('1')
//         return newPromise()
// })

// newPromise()
//       .then(() => {
//         console.log('2')
//         return newPromise()
// })

// newPromise()
//       .then(() => {
//         console.log('3')
//         return newPromise()
// })

// newPromise()
//       .then(() => {
//         console.log('4')
//         return newPromise()
// })

// newPromise()
//       .then(() => {
//         console.log('5')
//         return newPromise()
// })

// .then(() => console.log('5'))
// .catch(err => console.error(err));

// const test = new Promise((resolve, reject) => {
//   if(true){
//     resolve('jest ok')
//   } else {
//     reject('błąd')
//   }
// })

// test
//   .then(info => console.log(info))
//   .catch(err => console.error(err))

// get - pobiera dane, post - wysyła dane, put, patch - edycja danych, delete - usuwa dane

// const URL = 'mmcschool.pl' //jako API

// const test = {
//   method: 'POST'
// }

// // fetch(URL, {
// //   method: 'GET' // robimy obiekt
// // })

// fetch(URL, test)

// Async Await - uproszczone promisy/ możemy zapisać kod synchroniczny jako asynchroniczny

// const checkAge = age => {
//   return new Promise((resolve, reject) => {
//     if(age >= 18) {
//       resolve()
//     }else {
//       reject('Masz za mało lat')
//     }
//   })
// }

// const doubleCheck = () => {
//   return new Promise((resolve, reject) => {
//     console.log('Sprawdzam jeszcze raz...')
//     setTimeout(() => {
//       resolve('Faktycznie, wiek sie nie zgadza.')
//     }, 1000)
//   })
// }

// checkAge(50)
//   .then(() => {
//   console.log('Chyba możesz wejść...')
//   return doubleCheck() //odwołujemy się do doubleCheck
// })
//   .then(res => console.log(res)) //odpowiada resolvowi w doublecheck
//   .then(() => {
//   console.log('Weryfikacja zakończona')
// })
//   .catch(err => console.error(err))

//to samo co u góry zapisane z Async i Await

// async function test() {
// try{await checkAge(22)
//   console.log('Chyba możesz wejść.')
//   await doubleCheck()
//   console.log('Faktycznie, wiek się nie zgadza')
//   console.log('Weryfikacja zakończona')}
// } catch{
// console.error('Bląd, masz za mało lat.')
// }

// test();

// Async Await 2

// const URL = 'https://dog.ceo/api/breeds/image/random'

// fetch(URL)
//   .then(res => res.json)//przerabiamy plik na jsona - standardowa procedura 
//   .then(data => console.log(data))
//   .catch(error => console.error(error))

// async function test(){
//  try{
//   const res = await fetch(URL)
//   const data = await res.json()
//   console.log(data)
//  } catch {
//    console.error('błąd')
//  }
// }

// test()

// Axios 3 wersja jak można pobierać dane z API

// fetch(URL)
//   .then(res => res.json) //przerabiamy plik na jsona - standardowa procedura 
//   .then(data => one.setAttribute('src', res.message))
//   .catch(error => console.error(error))

// axiosa trzeba zainstalować z npm lub cdn

// axios.get(URL).then(res => 
//   two.setAttribute('src', res.data.message)
// )

// async function showImage(){
//   const response = await axios.get(URL)
//   three.setAttribute('src', resonse.data.message)
// }

// showImage();
